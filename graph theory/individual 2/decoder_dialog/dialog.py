from aiogram_dialog import Dialog, Window
from aiogram_dialog.widgets.input import MessageInput
from aiogram_dialog.widgets.kbd import SwitchTo, Button, Back
from aiogram_dialog.widgets.text import Const, Format
from aiogram.types import ContentType
from aiogram_dialog.widgets.media import StaticMedia
from decoder_dialog.states import StateDecoder
from decoder_dialog.func_dialog import (input_message_code, input_message_table,
                                        delete_image, get_tree_decoder_image, go_to_main)

decode_dialog = Dialog(
    Window(
        Const("–í–≤–µ–¥–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É —á–∞—Å—Ç–æ—Ç"),
        MessageInput(input_message_table, content_types=[ContentType.TEXT]),
        Button(Const("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†"), id="main_back", on_click=go_to_main),
        state=StateDecoder.input_table,
    ),
    Window(
        Const("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞"),
        MessageInput(input_message_code, content_types=[ContentType.TEXT]),
        Back(Const("–ù–∞–∑–∞–¥ ‚û°Ô∏è"), id="main_back"),
        state=StateDecoder.input_code
    ),
    Window(
        Const("–í—ã–±–∏—Ä–µ—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"),
        SwitchTo(Const("–ò—Å—Ö–æ–¥–Ω–æ–µ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üì™"), id="encoder_text", state=StateDecoder.encoder_message),
        SwitchTo(Const("–î–µ–∫–æ–¥–∏—Ä—É–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üì¨"), id="decoder_message", state=StateDecoder.decoder_result),
        SwitchTo(Const("–¢–∞–±–ª–∏—Ü–∞ —á–∞—Å—Ç–æ—Ç üìä"), id="table_frequency", state=StateDecoder.table_frequency_decoder),
        SwitchTo(Const("–î–µ—Ä–µ–≤–æ –•–∞—Ñ—Ñ–º–∞–Ω–∞ üå≥"), id="tree_decoder", state=StateDecoder.tree_decoder, on_click=get_tree_decoder_image),
        SwitchTo(Const("–¢–∞–±–ª–∏—Ü–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ üìÅ"), id="table_encoder_text", state=StateDecoder.table_encoder),
        Back(Const("–ù–∞–∑–∞–¥ ‚û°Ô∏è"), on_click=delete_image),
        state=StateDecoder.result
    ),
    Window(
        Format("–ó–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{dialog_data[code_decoder]}"),
        SwitchTo(Const("–ù–∞–∑–∞–¥ ‚û°Ô∏è"), id="back_result", state=StateDecoder.result),
        state=StateDecoder.encoder_message
    ),
    Window(
        Format("–†–∞—Å–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{dialog_data[text_decoder]}"),
        SwitchTo(Const("–ù–∞–∑–∞–¥ ‚û°Ô∏è"), id="back_result", state=StateDecoder.result),
        state=StateDecoder.decoder_result
    ),
    Window(
        Format("–¢–∞–±–ª–∏—Ü–∞ —á–∞—Å—Ç–æ—Ç:\n{dialog_data[table_frequency]}"),
        SwitchTo(Const("–ù–∞–∑–∞–¥ ‚û°Ô∏è"), id="back_result", state=StateDecoder.result),
        state=StateDecoder.table_frequency_decoder
    ),
    Window(
        Format("–¢–∞–±–ª–∏—Ü–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏:\n{dialog_data[encoder_table_sim]}"),
        SwitchTo(Const("–ù–∞–∑–∞–¥ ‚û°Ô∏è"), id="back_result", state=StateDecoder.result),
        state=StateDecoder.table_encoder
    ),
    Window(
        StaticMedia(
            path=Format(
                '/home/danil/PycharmProjects/KUBSU_ndividual/graph theory/individual 2/tree_decoder_image_{dialog_data[image_decoder_id]}.png'),
            type=ContentType.PHOTO,
        ),
        SwitchTo(text=Const("–ù–∞–∑–∞–¥ ‚û°Ô∏è"), state=StateDecoder.result, id="back_result"),
        state=StateDecoder.tree_decoder
    ),
)

